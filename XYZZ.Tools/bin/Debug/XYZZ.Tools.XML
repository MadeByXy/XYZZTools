<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XYZZ.Tools</name>
    </assembly>
    <members>
        <member name="T:XYZZ.Tools.Cache">
            <summary>
            缓存工具
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Cache.Set(System.String,System.String)">
            <summary>
            设置缓存
            </summary>
            <param name="name">数据名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:XYZZ.Tools.Cache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="name">数据名称</param>
            <returns></returns>
        </member>
        <member name="M:XYZZ.Tools.Cache.WriteFile">
            <summary>
            写入文件
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Cache.StartWrite(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            写入文件
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Cache.Encrypt(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XYZZ.Tools.Cache.Decrypt(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:XYZZ.Tools.DataBase">
            <summary>
            数据库操作类
            </summary>
        </member>
        <member name="P:XYZZ.Tools.DataBase.ConnectionString">
            <summary>
            数据库连接字段
            </summary>
        </member>
        <member name="M:XYZZ.Tools.DataBase.ExecuteSql``1(System.String,System.Object[])">
            <summary>
            执行SQL，并返回指定类型的结果
            <para>T类型说明：</para>
            <para><see cref="T:System.Int32"/>：查询返回查询行数，其余返回受影响的行数</para>
            <para><see cref="T:System.String"/>/<see cref="T:System.Decimal"/>：返回第一项数据</para>
            <para><see cref="T:System.Data.DataTable"/>：返回查询结果</para>
            <para><see cref="T:System.Boolean"/>：查询返回是否存在目标，其余返回是否存在受影响行</para>
            </summary>
        </member>
        <member name="M:XYZZ.Tools.DataBase.ExecuteSql(System.String,System.Object[])">
            <summary>
            执行SQL
            </summary>
        </member>
        <member name="T:XYZZ.Tools.DataBaseSupport">
            <summary>
            数据库辅助类
            </summary>
        </member>
        <member name="M:XYZZ.Tools.DataBaseSupport.GetLibraryFromTable(System.String,System.Boolean)">
            <summary>
            查询所有含有表名的数据库
            </summary>
            <param name="tableName">表名称</param>
            <param name="containsData">是否必须含有数据</param>
            <returns></returns>
        </member>
        <member name="M:XYZZ.Tools.DataBaseSupport.GetLibraryFromSQL(System.String,System.Boolean)">
            <summary>
            查找所有可以执行语句的数据库
            （暂时不能匹配from table1,table2 格式）
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="containsData">是否必须含有数据</param>
            <returns></returns>
        </member>
        <member name="T:XYZZ.Tools.DataCheck">
            <summary>
            数据合法性验证
            </summary>
        </member>
        <member name="M:XYZZ.Tools.DataCheck.AttributeCheck(XYZZ.Tools.DataCheck.IModel,System.String@)">
            <summary>
            验证数据是否合法
            </summary>
            <param name="parameter">数据</param>
            <param name="resultMessage">提示信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.IModel">
            <summary>
            数据原型
            </summary>
        </member>
        <member name="M:XYZZ.Tools.DataCheck.IModel.Result">
            <summary>
            数据验证成功后返回的信息(预留)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XYZZ.Tools.DataCheck.IModel.DataBind(Newtonsoft.Json.Linq.JObject)">
            <summary>
            绑定数据
            </summary>
            <param name="data">数据源</param>
        </member>
        <member name="M:XYZZ.Tools.DataCheck.IModel.DataBind(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            绑定数据
            </summary>
            <param name="data">数据源</param>
        </member>
        <member name="M:XYZZ.Tools.DataCheck.IModel.Check(System.String@)">
            <summary>
            验证数据是否正确
            <see cref="M:XYZZ.Tools.DataCheck.AttributeCheck(XYZZ.Tools.DataCheck.IModel,System.String@)"/>方法+自定义验证
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:XYZZ.Tools.DataCheck.ICheck.Order">
            <summary>
            调用顺序
            建议：区间检测设为0，格式检测设为1，非空检测设为2
            </summary>
        </member>
        <member name="P:XYZZ.Tools.DataCheck.ICheck.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="M:XYZZ.Tools.DataCheck.ICheck.Check(System.Object,System.String@)">
            <summary>
            验证数据是否合法
            </summary>
            <param name="value">值</param>
            <param name="resultMessage">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.NumberIntervalAttribute">
            <summary>
            数字区间检测
            </summary>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.DateIntervalAttribute">
            <summary>
            时间区间检测
            </summary>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.DateAttribute">
            <summary>
            时间格式检测
            </summary>
        </member>
        <member name="P:XYZZ.Tools.DataCheck.DateAttribute.Format">
            <summary>
            允许的时间格式
            </summary>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.EmailAttribute">
            <summary>
            Email格式检测
            </summary>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.EnumAttribute">
            <summary>
            枚举类型检测
            </summary>
        </member>
        <member name="T:XYZZ.Tools.DataCheck.NonNullAttribute">
            <summary>
            非空检测
            </summary>
        </member>
        <member name="T:XYZZ.Tools.Email">
            <summary>
            Email操作类
            </summary>
        </member>
        <member name="T:XYZZ.Tools.Email.ServerHost">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Email.#ctor(XYZZ.Tools.Email.ServerHost,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
             构造函数
            </summary>
            <param name="serverHost">发件箱的邮件服务器地址</param>
            <param name="toMail">收件人地址</param>
            <param name="fromMail">发件人地址</param>
            <param name="username">发件箱的用户名（即@符号前面的字符串，例如：hello@163.com，用户名为：hello）</param>
            <param name="password">发件人邮箱密码</param>
        </member>
        <member name="M:XYZZ.Tools.Email.AddAttachments(System.String)">
            <summary>
             添加附件
            </summary>
            <param name="attachmentsPath">附件的路径集合，以分号分隔</param>
        </member>
        <member name="M:XYZZ.Tools.Email.Send(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             发送邮件
            </summary>
            <param name="subject">邮件标题</param>
            <param name="emailBody">邮件内容（以html格式进行设计）</param>
            <param name="sslEnable">是否对邮件内容进行socket层加密传输</param>
            <param name="pwdCheckEnable">是否对发件人邮箱进行密码验证</param>
        </member>
        <member name="P:XYZZ.Tools.Email.AddtionAttribute.Host">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:XYZZ.Tools.Email.AddtionAttribute.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Extands.Range``1(``0,``0,``0)">
            <summary>
            获取范围区间的值
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Extands.Between``1(``0,``0,``0)">
            <summary>
            判断值是否处于区间
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="M:XYZZ.Tools.Extands.IsType(System.String,System.String)">
            <summary>
            判断数据内容是否为类型值
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Extands.DefaultValue(System.Type)">
            <summary>
            获取类型默认值
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Extands.SafeParse``1(System.Object)">
            <summary>
            将目标转换成指定类型的值
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="M:XYZZ.Tools.Extands.SafeParse``1(System.Object,``0)">
            <summary>
            将目标转换成指定类型的值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="defaultValue">转换失败返回的默认值</param>
        </member>
        <member name="M:XYZZ.Tools.Extands.SafeParse``1(System.Object,``0,System.Boolean)">
            <summary>
            将目标转换成指定类型的值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="defaultValue">转换失败返回的默认值</param>
            <param name="AllowEmpty">是否允许空值</param>
            <remarks>AllowEmpty值为否时空值将做转换失败处理(返回defaultValue)</remarks>
        </member>
        <member name="T:XYZZ.Tools.Log">
            <summary>
            日志操作类
            </summary>
        </member>
        <member name="T:XYZZ.Tools.Network">
            <summary>
            网络工具
            </summary>
        </member>
        <member name="M:XYZZ.Tools.Network.GetHtml(System.String,System.Collections.Generic.Dictionary{System.String,System.String},XYZZ.Tools.Network.HttpMethod,XYZZ.Tools.Network.SubmitMethod)">
            <summary>
            获取HTML
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
